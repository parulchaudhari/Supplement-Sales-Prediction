{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "JOB-A-THON - September 2021_Parul_Chaudhari.ipynb",
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AAy4BsBueVkd"
      },
      "source": [
        "## Settings"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "qzem2Au7NCVu"
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_log_error\n",
        "from sklearn.metrics import r2_score\n",
        "from xgboost import XGBRegressor\n",
        "import lightgbm as lgb\n",
        "\n",
        "from sklearn.metrics import classification_report\n",
        "\n",
        "pd.set_option('display.max_columns', None)\n",
        "pd.set_option('display.max_rows', None)\n",
        "\n",
        "# To ignore warnings\n",
        "import warnings\n",
        "warnings.filterwarnings(\"ignore\")"
      ],
      "execution_count": 295,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rwGNVPe0eYy_"
      },
      "source": [
        "## Reading and Observing Train and Test Datasets"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "g_4X79mqP4Dd",
        "outputId": "0d0ae472-31b2-4708-f799-e519d65cafd2"
      },
      "source": [
        "train = pd.read_csv('/content/drive/MyDrive/JOB-A-THON - September 2021/TRAIN.csv') #reading our train dataset from google drive\n",
        "train.head()"
      ],
      "execution_count": 296,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Store_Type</th>\n",
              "      <th>Location_Type</th>\n",
              "      <th>Region_Code</th>\n",
              "      <th>Date</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>Discount</th>\n",
              "      <th>#Order</th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>T1000001</td>\n",
              "      <td>1</td>\n",
              "      <td>S1</td>\n",
              "      <td>L3</td>\n",
              "      <td>R1</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>9</td>\n",
              "      <td>7011.84</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>T1000002</td>\n",
              "      <td>253</td>\n",
              "      <td>S4</td>\n",
              "      <td>L2</td>\n",
              "      <td>R1</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>60</td>\n",
              "      <td>51789.12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>T1000003</td>\n",
              "      <td>252</td>\n",
              "      <td>S3</td>\n",
              "      <td>L2</td>\n",
              "      <td>R1</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>42</td>\n",
              "      <td>36868.20</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>T1000004</td>\n",
              "      <td>251</td>\n",
              "      <td>S2</td>\n",
              "      <td>L3</td>\n",
              "      <td>R1</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>23</td>\n",
              "      <td>19715.16</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>T1000005</td>\n",
              "      <td>250</td>\n",
              "      <td>S2</td>\n",
              "      <td>L3</td>\n",
              "      <td>R4</td>\n",
              "      <td>2018-01-01</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>62</td>\n",
              "      <td>45614.52</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         ID  Store_id Store_Type Location_Type Region_Code        Date  \\\n",
              "0  T1000001         1         S1            L3          R1  2018-01-01   \n",
              "1  T1000002       253         S4            L2          R1  2018-01-01   \n",
              "2  T1000003       252         S3            L2          R1  2018-01-01   \n",
              "3  T1000004       251         S2            L3          R1  2018-01-01   \n",
              "4  T1000005       250         S2            L3          R4  2018-01-01   \n",
              "\n",
              "   Holiday Discount  #Order     Sales  \n",
              "0        1      Yes       9   7011.84  \n",
              "1        1      Yes      60  51789.12  \n",
              "2        1      Yes      42  36868.20  \n",
              "3        1      Yes      23  19715.16  \n",
              "4        1      Yes      62  45614.52  "
            ]
          },
          "metadata": {},
          "execution_count": 296
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "Tz0Rxp_aSKBd",
        "outputId": "9b4e44f5-a05f-40b1-ba32-95324256dbf4"
      },
      "source": [
        "train.tail() #observing last rows"
      ],
      "execution_count": 297,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Store_Type</th>\n",
              "      <th>Location_Type</th>\n",
              "      <th>Region_Code</th>\n",
              "      <th>Date</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>Discount</th>\n",
              "      <th>#Order</th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>188335</th>\n",
              "      <td>T1188336</td>\n",
              "      <td>149</td>\n",
              "      <td>S2</td>\n",
              "      <td>L3</td>\n",
              "      <td>R2</td>\n",
              "      <td>2019-05-31</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>51</td>\n",
              "      <td>37272.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188336</th>\n",
              "      <td>T1188337</td>\n",
              "      <td>153</td>\n",
              "      <td>S4</td>\n",
              "      <td>L2</td>\n",
              "      <td>R1</td>\n",
              "      <td>2019-05-31</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>90</td>\n",
              "      <td>54572.64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188337</th>\n",
              "      <td>T1188338</td>\n",
              "      <td>154</td>\n",
              "      <td>S1</td>\n",
              "      <td>L3</td>\n",
              "      <td>R2</td>\n",
              "      <td>2019-05-31</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>56</td>\n",
              "      <td>31624.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188338</th>\n",
              "      <td>T1188339</td>\n",
              "      <td>155</td>\n",
              "      <td>S3</td>\n",
              "      <td>L1</td>\n",
              "      <td>R2</td>\n",
              "      <td>2019-05-31</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>70</td>\n",
              "      <td>49162.41</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>188339</th>\n",
              "      <td>T1188340</td>\n",
              "      <td>152</td>\n",
              "      <td>S2</td>\n",
              "      <td>L1</td>\n",
              "      <td>R1</td>\n",
              "      <td>2019-05-31</td>\n",
              "      <td>1</td>\n",
              "      <td>No</td>\n",
              "      <td>47</td>\n",
              "      <td>37977.00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              ID  Store_id Store_Type Location_Type Region_Code        Date  \\\n",
              "188335  T1188336       149         S2            L3          R2  2019-05-31   \n",
              "188336  T1188337       153         S4            L2          R1  2019-05-31   \n",
              "188337  T1188338       154         S1            L3          R2  2019-05-31   \n",
              "188338  T1188339       155         S3            L1          R2  2019-05-31   \n",
              "188339  T1188340       152         S2            L1          R1  2019-05-31   \n",
              "\n",
              "        Holiday Discount  #Order     Sales  \n",
              "188335        1      Yes      51  37272.00  \n",
              "188336        1       No      90  54572.64  \n",
              "188337        1       No      56  31624.56  \n",
              "188338        1      Yes      70  49162.41  \n",
              "188339        1       No      47  37977.00  "
            ]
          },
          "metadata": {},
          "execution_count": 297
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8EuDPNrHc59x",
        "outputId": "723599a3-5bd9-4e14-83fa-537e0b9f4d14"
      },
      "source": [
        "train.shape #checking size of dataset"
      ],
      "execution_count": 298,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(188340, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 298
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "ZdBHkCHRdQBc",
        "outputId": "03d2d9c3-cc89-4a55-c732-7d78ab58806a"
      },
      "source": [
        "test = pd.read_csv('/content/drive/MyDrive/JOB-A-THON - September 2021/TEST_FINAL.csv') #reading test dataset\n",
        "test.head()"
      ],
      "execution_count": 299,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Store_Type</th>\n",
              "      <th>Location_Type</th>\n",
              "      <th>Region_Code</th>\n",
              "      <th>Date</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>Discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>T1188341</td>\n",
              "      <td>171</td>\n",
              "      <td>S4</td>\n",
              "      <td>L2</td>\n",
              "      <td>R3</td>\n",
              "      <td>2019-06-01</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>T1188342</td>\n",
              "      <td>172</td>\n",
              "      <td>S1</td>\n",
              "      <td>L1</td>\n",
              "      <td>R1</td>\n",
              "      <td>2019-06-01</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>T1188343</td>\n",
              "      <td>173</td>\n",
              "      <td>S4</td>\n",
              "      <td>L2</td>\n",
              "      <td>R1</td>\n",
              "      <td>2019-06-01</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>T1188344</td>\n",
              "      <td>174</td>\n",
              "      <td>S1</td>\n",
              "      <td>L1</td>\n",
              "      <td>R4</td>\n",
              "      <td>2019-06-01</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>T1188345</td>\n",
              "      <td>170</td>\n",
              "      <td>S1</td>\n",
              "      <td>L1</td>\n",
              "      <td>R2</td>\n",
              "      <td>2019-06-01</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         ID  Store_id Store_Type Location_Type Region_Code        Date  \\\n",
              "0  T1188341       171         S4            L2          R3  2019-06-01   \n",
              "1  T1188342       172         S1            L1          R1  2019-06-01   \n",
              "2  T1188343       173         S4            L2          R1  2019-06-01   \n",
              "3  T1188344       174         S1            L1          R4  2019-06-01   \n",
              "4  T1188345       170         S1            L1          R2  2019-06-01   \n",
              "\n",
              "   Holiday Discount  \n",
              "0        0       No  \n",
              "1        0       No  \n",
              "2        0       No  \n",
              "3        0       No  \n",
              "4        0       No  "
            ]
          },
          "metadata": {},
          "execution_count": 299
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wtgOi5RXdZTF",
        "outputId": "5cc5338c-021a-4c43-a185-693504548bab"
      },
      "source": [
        "test.shape"
      ],
      "execution_count": 300,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(22265, 8)"
            ]
          },
          "metadata": {},
          "execution_count": 300
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QRjrt_xQe3Z9",
        "outputId": "8d19e4a7-3e4f-411d-c55c-e758aa921e74"
      },
      "source": [
        "(train.isnull().sum()/train.shape[0])*100 #checking for null values"
      ],
      "execution_count": 301,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ID               0.0\n",
              "Store_id         0.0\n",
              "Store_Type       0.0\n",
              "Location_Type    0.0\n",
              "Region_Code      0.0\n",
              "Date             0.0\n",
              "Holiday          0.0\n",
              "Discount         0.0\n",
              "#Order           0.0\n",
              "Sales            0.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 301
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wit81NF9id-7",
        "outputId": "cafaec16-dbab-4ab9-90aa-4341528ee771"
      },
      "source": [
        "(test.isnull().sum()/test.shape[0])*100 #checking for null values"
      ],
      "execution_count": 302,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ID               0.0\n",
              "Store_id         0.0\n",
              "Store_Type       0.0\n",
              "Location_Type    0.0\n",
              "Region_Code      0.0\n",
              "Date             0.0\n",
              "Holiday          0.0\n",
              "Discount         0.0\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 302
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9bxNVUO4kFA2",
        "outputId": "e5acc5d4-bce0-42aa-a1b9-0643e6f9abdd"
      },
      "source": [
        "train.info() #just checking the types of features "
      ],
      "execution_count": 303,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 188340 entries, 0 to 188339\n",
            "Data columns (total 10 columns):\n",
            " #   Column         Non-Null Count   Dtype  \n",
            "---  ------         --------------   -----  \n",
            " 0   ID             188340 non-null  object \n",
            " 1   Store_id       188340 non-null  int64  \n",
            " 2   Store_Type     188340 non-null  object \n",
            " 3   Location_Type  188340 non-null  object \n",
            " 4   Region_Code    188340 non-null  object \n",
            " 5   Date           188340 non-null  object \n",
            " 6   Holiday        188340 non-null  int64  \n",
            " 7   Discount       188340 non-null  object \n",
            " 8   #Order         188340 non-null  int64  \n",
            " 9   Sales          188340 non-null  float64\n",
            "dtypes: float64(1), int64(3), object(6)\n",
            "memory usage: 14.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "07LFt24bkGqC",
        "outputId": "d54c9805-3860-4d13-b73a-46d0330a2b50"
      },
      "source": [
        "test.info() #just checking the types of features "
      ],
      "execution_count": 304,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 22265 entries, 0 to 22264\n",
            "Data columns (total 8 columns):\n",
            " #   Column         Non-Null Count  Dtype \n",
            "---  ------         --------------  ----- \n",
            " 0   ID             22265 non-null  object\n",
            " 1   Store_id       22265 non-null  int64 \n",
            " 2   Store_Type     22265 non-null  object\n",
            " 3   Location_Type  22265 non-null  object\n",
            " 4   Region_Code    22265 non-null  object\n",
            " 5   Date           22265 non-null  object\n",
            " 6   Holiday        22265 non-null  int64 \n",
            " 7   Discount       22265 non-null  object\n",
            "dtypes: int64(2), object(6)\n",
            "memory usage: 1.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SoblKxaYilor",
        "outputId": "30a0160e-a67c-4d0a-f2d8-b0e2d93bcdfb"
      },
      "source": [
        "train[train.duplicated()].shape #checking for duplicate values"
      ],
      "execution_count": 305,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(0, 10)"
            ]
          },
          "metadata": {},
          "execution_count": 305
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b-U5weaSjUnv"
      },
      "source": [
        ""
      ],
      "execution_count": 305,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6UlswtNpjioi"
      },
      "source": [
        "## EDA"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "YvzsyZRTOJoZ",
        "outputId": "729b059f-5bea-4211-9868-a84b6bed251e"
      },
      "source": [
        "sns.distplot(x = train['Sales'])\n",
        "plt.title('Sales Distribution in Train Dataset')\n",
        "plt.show()"
      ],
      "execution_count": 316,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "EvMuwv7AjkjI"
      },
      "source": [
        "#Creating time features here\n",
        "def timeFeatures(df):\n",
        "    # Derive new features using the click_time column\n",
        "    df['Date'] = pd.to_datetime(df['Date'])\n",
        "    df['day_of_week'] = df['Date'].dt.dayofweek.astype('object')\n",
        "    df[\"day_of_year\"] = df['Date'].dt.dayofyear.astype('object')\n",
        "    df[\"month\"] = df[\"Date\"].dt.month.astype('object')\n",
        "    return df\n",
        "\n",
        "train = timeFeatures(train)\n",
        "test = timeFeatures(test)\n",
        "\n",
        "train = train.drop(columns=['Date'])\n",
        "test = test.drop(columns=['Date'])"
      ],
      "execution_count": 306,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BIit2Svllo4x"
      },
      "source": [
        "train['Store_id'] = train['Store_id'].astype('object') #id and holiday is not continous so making it catgorical \n",
        "train['Holiday'] = train['Holiday'].astype('object')"
      ],
      "execution_count": 307,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e7ixW6F_yoKM"
      },
      "source": [
        "train['Sales'] = train['Sales'].apply(lambda x:round(x,2)) #making sure sales price is of format xxxxx.xx only"
      ],
      "execution_count": 308,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wxj_p1SamaH8",
        "outputId": "02eb553c-07af-4ac1-dc1e-faa9e8eb54f1"
      },
      "source": [
        "#Though all features are catgorical still keeping them in single list so further processing is little easy\n",
        "\n",
        "num_feats = train.drop(columns=['#Order','Sales',\"ID\"]).select_dtypes(include='number').columns.tolist()\n",
        "cat_feats = train.drop(columns=['Sales']).select_dtypes(include='object').columns.tolist()\n",
        "feats = num_feats+cat_feats\n",
        "target = 'Sales'\n",
        "print(num_feats)\n",
        "print(cat_feats)"
      ],
      "execution_count": 309,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[]\n",
            "['ID', 'Store_id', 'Store_Type', 'Location_Type', 'Region_Code', 'Holiday', 'Discount', 'day_of_week', 'day_of_year', 'month']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jD5sY32flDDx",
        "outputId": "8d2810f8-b680-4a77-c163-e12fa8d53433"
      },
      "source": [
        "train.info() #after processing looking at dtypes"
      ],
      "execution_count": 310,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 188340 entries, 0 to 188339\n",
            "Data columns (total 12 columns):\n",
            " #   Column         Non-Null Count   Dtype  \n",
            "---  ------         --------------   -----  \n",
            " 0   ID             188340 non-null  object \n",
            " 1   Store_id       188340 non-null  object \n",
            " 2   Store_Type     188340 non-null  object \n",
            " 3   Location_Type  188340 non-null  object \n",
            " 4   Region_Code    188340 non-null  object \n",
            " 5   Holiday        188340 non-null  object \n",
            " 6   Discount       188340 non-null  object \n",
            " 7   #Order         188340 non-null  int64  \n",
            " 8   Sales          188340 non-null  float64\n",
            " 9   day_of_week    188340 non-null  object \n",
            " 10  day_of_year    188340 non-null  object \n",
            " 11  month          188340 non-null  object \n",
            "dtypes: float64(1), int64(1), object(10)\n",
            "memory usage: 17.2+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4cvbHFatjkX9",
        "outputId": "e1044f5a-63c2-4c21-d1a4-f2af84887bfd"
      },
      "source": [
        "#checking if there is any mismatch of train and test catgories\n",
        "\n",
        "for each in train[cat_feats].columns:\n",
        "   print('train column', each, 'values',len(train[each].unique()))\n",
        "   print('test column', each, 'values', len(test[each].unique()))\n",
        "   print('train and test catg matches', len(train[~train[each].isin(test[each].unique())][each])) # zero means all catg are present in train which are in test\n",
        "   print('test and train catg matches', len(test[~test[each].isin(train[each].unique())][each]))  # zero means all catg are present in train which are in test\n",
        "   print('---------------------------------------------------')"
      ],
      "execution_count": 190,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train column ID values 188340\n",
            "test column ID values 22265\n",
            "train and test catg matches 188340\n",
            "test and train catg matches 22265\n",
            "---------------------------------------------------\n",
            "train column Store_id values 365\n",
            "test column Store_id values 365\n",
            "train and test catg matches 0\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n",
            "train column Store_Type values 4\n",
            "test column Store_Type values 4\n",
            "train and test catg matches 0\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n",
            "train column Location_Type values 5\n",
            "test column Location_Type values 5\n",
            "train and test catg matches 0\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n",
            "train column Region_Code values 4\n",
            "test column Region_Code values 4\n",
            "train and test catg matches 0\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n",
            "train column Holiday values 2\n",
            "test column Holiday values 2\n",
            "train and test catg matches 0\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n",
            "train column Discount values 2\n",
            "test column Discount values 2\n",
            "train and test catg matches 0\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n",
            "train column day_of_week values 7\n",
            "test column day_of_week values 7\n",
            "train and test catg matches 0\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n",
            "train column day_of_year values 365\n",
            "test column day_of_year values 61\n",
            "train and test catg matches 166075\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n",
            "train column month values 12\n",
            "test column month values 2\n",
            "train and test catg matches 166075\n",
            "test and train catg matches 0\n",
            "---------------------------------------------------\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 569
        },
        "id": "ONsBG-FDOf2l",
        "outputId": "e5797cbc-2bfd-417c-efd5-9e9790b007d4"
      },
      "source": [
        "#Observing catg features distribution\n",
        "plt.figure(figsize=(50, 15))  \n",
        "plt.subplot(3,3,1)\n",
        "plt.title('Feature Store_id')\n",
        "sns.countplot(train['Store_id'])\n",
        "\n",
        "plt.subplot(3,3,2)\n",
        "plt.title('Feature Store_Type')\n",
        "sns.countplot(train['Store_Type'])\n",
        "\n",
        "plt.subplot(3,3,3)\n",
        "plt.title('Feature Location_Type')\n",
        "sns.countplot(train['Location_Type'])\n",
        "\n",
        "plt.subplot(3,3,4)\n",
        "plt.title('Feature Region_Code')\n",
        "sns.countplot(train['Region_Code'])\n",
        "\n",
        "plt.subplot(3,3,5)\n",
        "plt.title('Feature Holiday')\n",
        "sns.countplot(train['Holiday'])\n",
        "\n",
        "plt.subplot(3,3,6)\n",
        "plt.title('Feature Discount')\n",
        "sns.countplot(train['Discount'])\n",
        "\n",
        "plt.subplot(3,3,7)\n",
        "plt.title('Feature day_of_week')\n",
        "sns.countplot(train['day_of_week'])\n",
        "\n",
        "plt.subplot(3,3,8)\n",
        "plt.title('Feature day_of_year')\n",
        "sns.countplot(train['day_of_year'])\n",
        "\n",
        "plt.subplot(3,3,9)\n",
        "plt.title('Feature month')\n",
        "sns.countplot(train['month'])\n",
        "plt.show() "
      ],
      "execution_count": 319,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 3600x1080 with 9 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 173
        },
        "id": "SAJ2qYV9L2-7",
        "outputId": "6b432114-1009-4bd3-ffab-ecd68f3b6493"
      },
      "source": [
        "train[cat_feats].describe() #checking the basic details of our features"
      ],
      "execution_count": 311,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Store_Type</th>\n",
              "      <th>Location_Type</th>\n",
              "      <th>Region_Code</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>Discount</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>day_of_year</th>\n",
              "      <th>month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "      <td>188340</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>unique</th>\n",
              "      <td>188340</td>\n",
              "      <td>365</td>\n",
              "      <td>4</td>\n",
              "      <td>5</td>\n",
              "      <td>4</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>7</td>\n",
              "      <td>365</td>\n",
              "      <td>12</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>top</th>\n",
              "      <td>T1092501</td>\n",
              "      <td>365</td>\n",
              "      <td>S1</td>\n",
              "      <td>L1</td>\n",
              "      <td>R1</td>\n",
              "      <td>0</td>\n",
              "      <td>No</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>freq</th>\n",
              "      <td>1</td>\n",
              "      <td>516</td>\n",
              "      <td>88752</td>\n",
              "      <td>85140</td>\n",
              "      <td>63984</td>\n",
              "      <td>163520</td>\n",
              "      <td>104051</td>\n",
              "      <td>27010</td>\n",
              "      <td>730</td>\n",
              "      <td>22630</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              ID  Store_id Store_Type Location_Type Region_Code  Holiday  \\\n",
              "count     188340    188340     188340        188340      188340   188340   \n",
              "unique    188340       365          4             5           4        2   \n",
              "top     T1092501       365         S1            L1          R1        0   \n",
              "freq           1       516      88752         85140       63984   163520   \n",
              "\n",
              "       Discount  day_of_week  day_of_year   month  \n",
              "count    188340       188340       188340  188340  \n",
              "unique        2            7          365      12  \n",
              "top          No            4            1       5  \n",
              "freq     104051        27010          730   22630  "
            ]
          },
          "metadata": {},
          "execution_count": 311
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "eI0h-z5jjkVH",
        "outputId": "2116d2a6-8303-426e-d250-56abcbf25f21"
      },
      "source": [
        "train.head() #after processing loooking at data again"
      ],
      "execution_count": 191,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Store_Type</th>\n",
              "      <th>Location_Type</th>\n",
              "      <th>Region_Code</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>Discount</th>\n",
              "      <th>#Order</th>\n",
              "      <th>Sales</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>day_of_year</th>\n",
              "      <th>month</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>T1000001</td>\n",
              "      <td>1</td>\n",
              "      <td>S1</td>\n",
              "      <td>L3</td>\n",
              "      <td>R1</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>9</td>\n",
              "      <td>7011.84</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>T1000002</td>\n",
              "      <td>253</td>\n",
              "      <td>S4</td>\n",
              "      <td>L2</td>\n",
              "      <td>R1</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>60</td>\n",
              "      <td>51789.12</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>T1000003</td>\n",
              "      <td>252</td>\n",
              "      <td>S3</td>\n",
              "      <td>L2</td>\n",
              "      <td>R1</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>42</td>\n",
              "      <td>36868.20</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>T1000004</td>\n",
              "      <td>251</td>\n",
              "      <td>S2</td>\n",
              "      <td>L3</td>\n",
              "      <td>R1</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>23</td>\n",
              "      <td>19715.16</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>T1000005</td>\n",
              "      <td>250</td>\n",
              "      <td>S2</td>\n",
              "      <td>L3</td>\n",
              "      <td>R4</td>\n",
              "      <td>1</td>\n",
              "      <td>Yes</td>\n",
              "      <td>62</td>\n",
              "      <td>45614.52</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         ID Store_id Store_Type Location_Type Region_Code Holiday Discount  \\\n",
              "0  T1000001        1         S1            L3          R1       1      Yes   \n",
              "1  T1000002      253         S4            L2          R1       1      Yes   \n",
              "2  T1000003      252         S3            L2          R1       1      Yes   \n",
              "3  T1000004      251         S2            L3          R1       1      Yes   \n",
              "4  T1000005      250         S2            L3          R4       1      Yes   \n",
              "\n",
              "   #Order     Sales day_of_week day_of_year month  \n",
              "0       9   7011.84           0           1     1  \n",
              "1      60  51789.12           0           1     1  \n",
              "2      42  36868.20           0           1     1  \n",
              "3      23  19715.16           0           1     1  \n",
              "4      62  45614.52           0           1     1  "
            ]
          },
          "metadata": {},
          "execution_count": 191
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kUIdQbiOjkP6"
      },
      "source": [
        ""
      ],
      "execution_count": 191,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eTZ9yOtyjLnT"
      },
      "source": [
        "## Data Pre Processing "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Tsyj32rGMojx"
      },
      "source": [
        "Here pandas dummies feature is used for creating new useful features from catgorical variables. \n",
        "\n",
        "Dummy Feature: Convert categorical variable into dummy/indicator variables"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "BKNEk2fDi40Z",
        "outputId": "6c57fc75-3947-4943-9d5a-8f6ca6d4fb7e"
      },
      "source": [
        "for each in ['Store_Type','Location_Type','Region_Code','Discount']:\n",
        "    dummiesList = pd.get_dummies(train[each],drop_first=True)\n",
        "    train = pd.concat([train, dummiesList], axis = 1)\n",
        "    train= train.drop(columns=[each])\n",
        "    print(each,train.shape)\n",
        "\n",
        "    dummiesList = pd.get_dummies(test[each],drop_first=True)\n",
        "    test = pd.concat([test, dummiesList], axis = 1)\n",
        "    test= test.drop(columns=[each])\n",
        "    print(each,test.shape)"
      ],
      "execution_count": 192,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Store_Type (188340, 14)\n",
            "Store_Type (22265, 12)\n",
            "Location_Type (188340, 17)\n",
            "Location_Type (22265, 15)\n",
            "Region_Code (188340, 19)\n",
            "Region_Code (22265, 17)\n",
            "Discount (188340, 19)\n",
            "Discount (22265, 17)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "m-jIrGaEnV29",
        "outputId": "8058be30-836b-45fd-fe43-878c0ee316a7"
      },
      "source": [
        "train.shape, test.shape"
      ],
      "execution_count": 193,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((188340, 19), (22265, 17))"
            ]
          },
          "metadata": {},
          "execution_count": 193
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "uiF0HyCqnZ9O",
        "outputId": "5621a10d-4f11-46e5-8758-4ac50521fcd1"
      },
      "source": [
        "train.head()"
      ],
      "execution_count": 194,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>#Order</th>\n",
              "      <th>Sales</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>day_of_year</th>\n",
              "      <th>month</th>\n",
              "      <th>S2</th>\n",
              "      <th>S3</th>\n",
              "      <th>S4</th>\n",
              "      <th>L2</th>\n",
              "      <th>L3</th>\n",
              "      <th>L4</th>\n",
              "      <th>L5</th>\n",
              "      <th>R2</th>\n",
              "      <th>R3</th>\n",
              "      <th>R4</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>T1000001</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>9</td>\n",
              "      <td>7011.84</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>T1000002</td>\n",
              "      <td>253</td>\n",
              "      <td>1</td>\n",
              "      <td>60</td>\n",
              "      <td>51789.12</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>T1000003</td>\n",
              "      <td>252</td>\n",
              "      <td>1</td>\n",
              "      <td>42</td>\n",
              "      <td>36868.20</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>T1000004</td>\n",
              "      <td>251</td>\n",
              "      <td>1</td>\n",
              "      <td>23</td>\n",
              "      <td>19715.16</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>T1000005</td>\n",
              "      <td>250</td>\n",
              "      <td>1</td>\n",
              "      <td>62</td>\n",
              "      <td>45614.52</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         ID Store_id Holiday  #Order     Sales day_of_week day_of_year month  \\\n",
              "0  T1000001        1       1       9   7011.84           0           1     1   \n",
              "1  T1000002      253       1      60  51789.12           0           1     1   \n",
              "2  T1000003      252       1      42  36868.20           0           1     1   \n",
              "3  T1000004      251       1      23  19715.16           0           1     1   \n",
              "4  T1000005      250       1      62  45614.52           0           1     1   \n",
              "\n",
              "   S2  S3  S4  L2  L3  L4  L5  R2  R3  R4  Yes  \n",
              "0   0   0   0   0   1   0   0   0   0   0    1  \n",
              "1   0   0   1   1   0   0   0   0   0   0    1  \n",
              "2   0   1   0   1   0   0   0   0   0   0    1  \n",
              "3   1   0   0   0   1   0   0   0   0   0    1  \n",
              "4   1   0   0   0   1   0   0   0   0   1    1  "
            ]
          },
          "metadata": {},
          "execution_count": 194
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "5uEGBxCJnf3w",
        "outputId": "2edf5d41-13e2-44cf-e192-47a9f78a7141"
      },
      "source": [
        "test.head()"
      ],
      "execution_count": 195,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ID</th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>day_of_year</th>\n",
              "      <th>month</th>\n",
              "      <th>S2</th>\n",
              "      <th>S3</th>\n",
              "      <th>S4</th>\n",
              "      <th>L2</th>\n",
              "      <th>L3</th>\n",
              "      <th>L4</th>\n",
              "      <th>L5</th>\n",
              "      <th>R2</th>\n",
              "      <th>R3</th>\n",
              "      <th>R4</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>T1188341</td>\n",
              "      <td>171</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>T1188342</td>\n",
              "      <td>172</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>T1188343</td>\n",
              "      <td>173</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>T1188344</td>\n",
              "      <td>174</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>T1188345</td>\n",
              "      <td>170</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         ID  Store_id  Holiday day_of_week day_of_year month  S2  S3  S4  L2  \\\n",
              "0  T1188341       171        0           5         152     6   0   0   1   1   \n",
              "1  T1188342       172        0           5         152     6   0   0   0   0   \n",
              "2  T1188343       173        0           5         152     6   0   0   1   1   \n",
              "3  T1188344       174        0           5         152     6   0   0   0   0   \n",
              "4  T1188345       170        0           5         152     6   0   0   0   0   \n",
              "\n",
              "   L3  L4  L5  R2  R3  R4  Yes  \n",
              "0   0   0   0   0   1   0    0  \n",
              "1   0   0   0   0   0   0    0  \n",
              "2   0   0   0   0   0   0    0  \n",
              "3   0   0   0   0   0   1    0  \n",
              "4   0   0   0   1   0   0    0  "
            ]
          },
          "metadata": {},
          "execution_count": 195
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u2T4djKWM4KS"
      },
      "source": [
        "splitiing data for test and train for validation purpose"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "u4rw_cEcnhH7",
        "outputId": "e83ffd9c-05d3-45b7-823a-5457872715bf"
      },
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "# create x and y train\n",
        "X = train.drop(columns=['#Order','Sales','ID'], axis=1)\n",
        "y = train[['Sales']]\n",
        "\n",
        "X_test = test.drop(columns=['ID'], axis=1)\n",
        "\n",
        "np.random.seed(0)# split data into train and test/validation sets\n",
        "\n",
        "X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size = 0.2,random_state=41,)\n",
        "X_train.shape, X_valid.shape, y_train.shape, y_valid.shape, X_test.shape"
      ],
      "execution_count": 196,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((150672, 16), (37668, 16), (150672, 1), (37668, 1), (22265, 16))"
            ]
          },
          "metadata": {},
          "execution_count": 196
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "i016ngbMwkoy",
        "outputId": "188005e3-2346-4864-ed0b-2f59487b13a0"
      },
      "source": [
        "X_test.head()"
      ],
      "execution_count": 197,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>day_of_year</th>\n",
              "      <th>month</th>\n",
              "      <th>S2</th>\n",
              "      <th>S3</th>\n",
              "      <th>S4</th>\n",
              "      <th>L2</th>\n",
              "      <th>L3</th>\n",
              "      <th>L4</th>\n",
              "      <th>L5</th>\n",
              "      <th>R2</th>\n",
              "      <th>R3</th>\n",
              "      <th>R4</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>171</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>172</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>173</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>174</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>170</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>152</td>\n",
              "      <td>6</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   Store_id  Holiday day_of_week day_of_year month  S2  S3  S4  L2  L3  L4  \\\n",
              "0       171        0           5         152     6   0   0   1   1   0   0   \n",
              "1       172        0           5         152     6   0   0   0   0   0   0   \n",
              "2       173        0           5         152     6   0   0   1   1   0   0   \n",
              "3       174        0           5         152     6   0   0   0   0   0   0   \n",
              "4       170        0           5         152     6   0   0   0   0   0   0   \n",
              "\n",
              "   L5  R2  R3  R4  Yes  \n",
              "0   0   0   1   0    0  \n",
              "1   0   0   0   0    0  \n",
              "2   0   0   0   0    0  \n",
              "3   0   0   0   1    0  \n",
              "4   0   1   0   0    0  "
            ]
          },
          "metadata": {},
          "execution_count": 197
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "70AyfQd7wnZo",
        "outputId": "0c7b361b-2491-482e-b938-b3158a865207"
      },
      "source": [
        "X_train.head()"
      ],
      "execution_count": 198,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Store_id</th>\n",
              "      <th>Holiday</th>\n",
              "      <th>day_of_week</th>\n",
              "      <th>day_of_year</th>\n",
              "      <th>month</th>\n",
              "      <th>S2</th>\n",
              "      <th>S3</th>\n",
              "      <th>S4</th>\n",
              "      <th>L2</th>\n",
              "      <th>L3</th>\n",
              "      <th>L4</th>\n",
              "      <th>L5</th>\n",
              "      <th>R2</th>\n",
              "      <th>R3</th>\n",
              "      <th>R4</th>\n",
              "      <th>Yes</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11566</th>\n",
              "      <td>164</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "      <td>32</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>62376</th>\n",
              "      <td>250</td>\n",
              "      <td>0</td>\n",
              "      <td>2</td>\n",
              "      <td>171</td>\n",
              "      <td>6</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>176766</th>\n",
              "      <td>189</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>120</td>\n",
              "      <td>4</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4659</th>\n",
              "      <td>321</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>13</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>82476</th>\n",
              "      <td>279</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>226</td>\n",
              "      <td>8</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       Store_id Holiday day_of_week day_of_year month  S2  S3  S4  L2  L3  L4  \\\n",
              "11566       164       0           3          32     2   0   0   0   0   0   0   \n",
              "62376       250       0           2         171     6   1   0   0   0   1   0   \n",
              "176766      189       0           1         120     4   1   0   0   0   1   0   \n",
              "4659        321       0           5          13     1   0   1   0   0   0   0   \n",
              "82476       279       0           1         226     8   1   0   0   0   1   0   \n",
              "\n",
              "        L5  R2  R3  R4  Yes  \n",
              "11566    0   0   1   0    0  \n",
              "62376    0   0   0   1    1  \n",
              "176766   0   0   1   0    1  \n",
              "4659     0   1   0   0    1  \n",
              "82476    0   1   0   0    0  "
            ]
          },
          "metadata": {},
          "execution_count": 198
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "5BbNDSteuMdQ"
      },
      "source": [
        "#for memory saving, changing dtype\n",
        "X_train = X_train.astype('uint8')\n",
        "X_valid = X_valid.astype('uint8')\n",
        "X_test = X_test.astype('uint8')"
      ],
      "execution_count": 313,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wr_ilBJEvB3-"
      },
      "source": [
        "#inital dataframes for predictions which will help us to perform actions easily. \n",
        "\n",
        "pred = pd.DataFrame()\n",
        "valid_pred = pd.DataFrame()"
      ],
      "execution_count": 200,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7tpbhtjPoCw8"
      },
      "source": [
        "## Random Forest"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uYTxH7SRnx4e",
        "outputId": "87f8ba78-7fac-4da8-840c-731b5c4d4715"
      },
      "source": [
        "%%time\n",
        "#training the rfc model\n",
        "rfc=  RandomForestRegressor(random_state=42)\n",
        "rfc.fit(X_train,y_train)\n",
        "\n",
        "valid_pred['rfc'] = rfc.predict(X_valid)\n",
        "valid_pred['rfc'] = valid_pred['rfc'].apply(lambda x:round(x,2))\n",
        "\n",
        "pred['rfc'] = rfc.predict(X_test)\n",
        "pred['rfc'] = pred['rfc'].apply(lambda x:round(x,2))\n",
        "\n",
        "print('r2_score',r2_score(y_valid,valid_pred))\n",
        "print('mean_squared_log_error',mean_squared_log_error(y_valid, valid_pred)*1000)"
      ],
      "execution_count": 201,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r2_score 0.7645871631685298\n",
            "mean_squared_log_error 54.124802778600916\n",
            "CPU times: user 54.8 s, sys: 167 ms, total: 55 s\n",
            "Wall time: 54.9 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "5Pj97SJ9x_Na",
        "outputId": "cfe995a4-7f66-4123-9fec-35466ef6e5b3"
      },
      "source": [
        "imp_df = pd.DataFrame({\n",
        "    \"Varname\": X_train.columns,\n",
        "    \"Imp\": rfc.feature_importances_}).sort_values(by=\"Imp\", ascending=False)\n",
        "    \n",
        "from matplotlib import pyplot\n",
        "a4_dims = (17, 5)\n",
        "fig, ax = pyplot.subplots(figsize=a4_dims)\n",
        "\n",
        "sns.barplot(x='Varname',y='Imp', data=imp_df,ax=ax)\n",
        "plt.title('Feature Importance with RFC', fontsize=20)"
      ],
      "execution_count": 287,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Feature Importance with RFC')"
            ]
          },
          "metadata": {},
          "execution_count": 287
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1224x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6743QrcUqVi6"
      },
      "source": [
        "## XGB"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "qLmcwvx-qXPk",
        "outputId": "a42787d2-d0b5-4c08-eea5-2515ebdac510"
      },
      "source": [
        "%%time\n",
        "#training the xgb model\n",
        "xgb = XGBRegressor(random_state=42)                \n",
        "xgb.fit(X_train, y_train)\n",
        "\n",
        "valid_pred['xgb'] = xgb.predict(X_valid)\n",
        "valid_pred['xgb'] = valid_pred['xgb'].apply(lambda x:round(x,2))\n",
        "\n",
        "pred['xgb'] = xgb.predict(X_test)\n",
        "pred['xgb'] = pred['xgb'].apply(lambda x:round(x,2))\n",
        "\n",
        "print('r2_score',r2_score(y_valid,valid_pred['xgb']))\n",
        "print('mean_squared_log_error',mean_squared_log_error(y_valid, valid_pred['xgb'])*1000)"
      ],
      "execution_count": 203,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[11:24:11] WARNING: /workspace/src/objective/regression_obj.cu:152: reg:linear is now deprecated in favor of reg:squarederror.\n",
            "r2_score 0.6671841608729041\n",
            "mean_squared_log_error 88.94995870223013\n",
            "CPU times: user 8.87 s, sys: 18.3 ms, total: 8.89 s\n",
            "Wall time: 8.86 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 373
        },
        "id": "e5V_augdKNrK",
        "outputId": "fb386a85-2702-4be6-abff-6674b155ab91"
      },
      "source": [
        "imp_df = pd.DataFrame({\n",
        "    \"Varname\": X_train.columns,\n",
        "    \"Imp\": xgb.feature_importances_}).sort_values(by=\"Imp\", ascending=False)\n",
        "    \n",
        "from matplotlib import pyplot\n",
        "a4_dims = (17, 5)\n",
        "fig, ax = pyplot.subplots(figsize=a4_dims)\n",
        "\n",
        "sns.barplot(x='Varname',y='Imp', data=imp_df,ax=ax)\n",
        "plt.title('Feature Importance with XGB', fontsize=20)"
      ],
      "execution_count": 291,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Feature Importance with XGB')"
            ]
          },
          "metadata": {},
          "execution_count": 291
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 1224x360 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "y_SxMx2X2aaA"
      },
      "source": [
        "## LGBM"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OfAAyd_t2aBh",
        "outputId": "28c7f6b6-30cf-46c2-9196-194c24b92afb"
      },
      "source": [
        "%%time\n",
        "#training the lgbm model\n",
        "#Converting the dataset in proper LGB format\n",
        "d_train=lgb.Dataset(X_train, label=y_train)\n",
        "d_eval=lgb.Dataset(X_valid, label=y_valid)\n",
        "\n",
        "#setting up the parameters\n",
        "params={}\n",
        "params['learning_rate']=0.01\n",
        "params['boosting_type']='gbdt' #GradientBoostingDecisionTree\n",
        "params['objective']='regression' #Regression target feature\n",
        "params['metric']='mse' #metric for regression \n",
        "\n",
        "lgbm=lgb.train(params,num_boost_round=100000, train_set=d_train,\n",
        "                          valid_sets=d_eval,verbose_eval=1000,\n",
        "                          early_stopping_rounds=200,)  #training the model on 10 epocs"
      ],
      "execution_count": 265,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training until validation scores don't improve for 200 rounds.\n",
            "[1000]\tvalid_0's l2: 7.63853e+07\n",
            "[2000]\tvalid_0's l2: 6.75988e+07\n",
            "[3000]\tvalid_0's l2: 6.35173e+07\n",
            "[4000]\tvalid_0's l2: 6.05759e+07\n",
            "[5000]\tvalid_0's l2: 5.86642e+07\n",
            "[6000]\tvalid_0's l2: 5.71526e+07\n",
            "[7000]\tvalid_0's l2: 5.60098e+07\n",
            "[8000]\tvalid_0's l2: 5.49086e+07\n",
            "[9000]\tvalid_0's l2: 5.39596e+07\n",
            "[10000]\tvalid_0's l2: 5.31614e+07\n",
            "[11000]\tvalid_0's l2: 5.23934e+07\n",
            "[12000]\tvalid_0's l2: 5.17538e+07\n",
            "[13000]\tvalid_0's l2: 5.11314e+07\n",
            "[14000]\tvalid_0's l2: 5.05535e+07\n",
            "[15000]\tvalid_0's l2: 5.00845e+07\n",
            "[16000]\tvalid_0's l2: 4.95941e+07\n",
            "[17000]\tvalid_0's l2: 4.91322e+07\n",
            "[18000]\tvalid_0's l2: 4.86945e+07\n",
            "[19000]\tvalid_0's l2: 4.825e+07\n",
            "[20000]\tvalid_0's l2: 4.78315e+07\n",
            "[21000]\tvalid_0's l2: 4.7435e+07\n",
            "[22000]\tvalid_0's l2: 4.70977e+07\n",
            "[23000]\tvalid_0's l2: 4.68076e+07\n",
            "[24000]\tvalid_0's l2: 4.65113e+07\n",
            "[25000]\tvalid_0's l2: 4.6214e+07\n",
            "[26000]\tvalid_0's l2: 4.59089e+07\n",
            "[27000]\tvalid_0's l2: 4.56524e+07\n",
            "[28000]\tvalid_0's l2: 4.53782e+07\n",
            "[29000]\tvalid_0's l2: 4.51763e+07\n",
            "[30000]\tvalid_0's l2: 4.49406e+07\n",
            "[31000]\tvalid_0's l2: 4.46914e+07\n",
            "[32000]\tvalid_0's l2: 4.44472e+07\n",
            "[33000]\tvalid_0's l2: 4.42463e+07\n",
            "[34000]\tvalid_0's l2: 4.40516e+07\n",
            "[35000]\tvalid_0's l2: 4.38228e+07\n",
            "[36000]\tvalid_0's l2: 4.36182e+07\n",
            "[37000]\tvalid_0's l2: 4.33534e+07\n",
            "[38000]\tvalid_0's l2: 4.31494e+07\n",
            "[39000]\tvalid_0's l2: 4.29389e+07\n",
            "[40000]\tvalid_0's l2: 4.27643e+07\n",
            "[41000]\tvalid_0's l2: 4.25775e+07\n",
            "[42000]\tvalid_0's l2: 4.24173e+07\n",
            "[43000]\tvalid_0's l2: 4.22017e+07\n",
            "[44000]\tvalid_0's l2: 4.20372e+07\n",
            "[45000]\tvalid_0's l2: 4.18879e+07\n",
            "[46000]\tvalid_0's l2: 4.17331e+07\n",
            "[47000]\tvalid_0's l2: 4.15901e+07\n",
            "[48000]\tvalid_0's l2: 4.14308e+07\n",
            "[49000]\tvalid_0's l2: 4.12447e+07\n",
            "[50000]\tvalid_0's l2: 4.11048e+07\n",
            "[51000]\tvalid_0's l2: 4.09605e+07\n",
            "[52000]\tvalid_0's l2: 4.08253e+07\n",
            "[53000]\tvalid_0's l2: 4.06742e+07\n",
            "[54000]\tvalid_0's l2: 4.05413e+07\n",
            "[55000]\tvalid_0's l2: 4.03983e+07\n",
            "[56000]\tvalid_0's l2: 4.02756e+07\n",
            "[57000]\tvalid_0's l2: 4.01164e+07\n",
            "[58000]\tvalid_0's l2: 3.99837e+07\n",
            "[59000]\tvalid_0's l2: 3.98741e+07\n",
            "[60000]\tvalid_0's l2: 3.97385e+07\n",
            "[61000]\tvalid_0's l2: 3.95977e+07\n",
            "[62000]\tvalid_0's l2: 3.94701e+07\n",
            "[63000]\tvalid_0's l2: 3.93638e+07\n",
            "[64000]\tvalid_0's l2: 3.92598e+07\n",
            "[65000]\tvalid_0's l2: 3.91635e+07\n",
            "[66000]\tvalid_0's l2: 3.90561e+07\n",
            "[67000]\tvalid_0's l2: 3.89393e+07\n",
            "[68000]\tvalid_0's l2: 3.88178e+07\n",
            "[69000]\tvalid_0's l2: 3.86929e+07\n",
            "[70000]\tvalid_0's l2: 3.85743e+07\n",
            "[71000]\tvalid_0's l2: 3.84481e+07\n",
            "[72000]\tvalid_0's l2: 3.83717e+07\n",
            "[73000]\tvalid_0's l2: 3.82761e+07\n",
            "[74000]\tvalid_0's l2: 3.81667e+07\n",
            "[75000]\tvalid_0's l2: 3.80804e+07\n",
            "[76000]\tvalid_0's l2: 3.79705e+07\n",
            "[77000]\tvalid_0's l2: 3.78598e+07\n",
            "[78000]\tvalid_0's l2: 3.7749e+07\n",
            "[79000]\tvalid_0's l2: 3.76554e+07\n",
            "[80000]\tvalid_0's l2: 3.7562e+07\n",
            "[81000]\tvalid_0's l2: 3.74896e+07\n",
            "[82000]\tvalid_0's l2: 3.73901e+07\n",
            "[83000]\tvalid_0's l2: 3.72809e+07\n",
            "[84000]\tvalid_0's l2: 3.71785e+07\n",
            "[85000]\tvalid_0's l2: 3.70958e+07\n",
            "[86000]\tvalid_0's l2: 3.70136e+07\n",
            "[87000]\tvalid_0's l2: 3.6932e+07\n",
            "[88000]\tvalid_0's l2: 3.68501e+07\n",
            "[89000]\tvalid_0's l2: 3.67573e+07\n",
            "[90000]\tvalid_0's l2: 3.66626e+07\n",
            "[91000]\tvalid_0's l2: 3.65867e+07\n",
            "[92000]\tvalid_0's l2: 3.65162e+07\n",
            "[93000]\tvalid_0's l2: 3.64334e+07\n",
            "[94000]\tvalid_0's l2: 3.63436e+07\n",
            "[95000]\tvalid_0's l2: 3.62752e+07\n",
            "[96000]\tvalid_0's l2: 3.62021e+07\n",
            "[97000]\tvalid_0's l2: 3.61133e+07\n",
            "[98000]\tvalid_0's l2: 3.60162e+07\n",
            "[99000]\tvalid_0's l2: 3.59277e+07\n",
            "[100000]\tvalid_0's l2: 3.5862e+07\n",
            "Did not meet early stopping. Best iteration is:\n",
            "[100000]\tvalid_0's l2: 3.5862e+07\n",
            "CPU times: user 12min 28s, sys: 8.49 s, total: 12min 37s\n",
            "Wall time: 12min 35s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "B9CglM9c3QvX",
        "outputId": "6a5d05ec-84dd-43a3-889c-3a0880235e37"
      },
      "source": [
        "valid_pred['lgbm']=lgbm.predict(X_valid)\n",
        "valid_pred['lgbm'] = xgb.predict(X_valid)\n",
        "valid_pred['lgbm'] = valid_pred['lgbm'].apply(lambda x:round(x,2))\n",
        "\n",
        "pred['lgbm'] = xgb.predict(X_test)\n",
        "pred['lgbm'] = pred['lgbm'].apply(lambda x:round(x,2))\n",
        "\n",
        "print('r2_score',r2_score(y_valid,valid_pred['lgbm']))\n",
        "print('mean_squared_log_error',mean_squared_log_error(y_valid, valid_pred['lgbm'])*1000)"
      ],
      "execution_count": 266,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r2_score 0.6671841608729041\n",
            "mean_squared_log_error 88.94995870223013\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VdH9ayvt3Qpd"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JucBvWuxt-t7"
      },
      "source": [
        "## Ensemble of Models"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7QD4-MZuNSvd"
      },
      "source": [
        "Different weightage is given to xgb, rfc and lgbm poredictions because error on lgbm<xgb<rfc\n",
        "\n",
        "- lgbm weightage  = 3\n",
        "- xgb weightage = 2\n",
        "- rfc weightage = 1"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gd2W8-rSuX5L",
        "outputId": "779d2349-fcc7-4344-f7ce-08513a9ee354"
      },
      "source": [
        "#Checking on validation datasets\n",
        "valid_pred['ensemble'] = round((2*valid_pred['xgb'] + valid_pred['rfc']+3*valid_pred['lgbm'])/6,2)\n",
        "print('r2_score',r2_score(y_valid,valid_pred['ensemble']))\n",
        "print('mean_squared_log_error',mean_squared_log_error(y_valid, valid_pred['ensemble'])*1000)"
      ],
      "execution_count": 281,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "r2_score 0.7078360116828539\n",
            "mean_squared_log_error 79.86125886359228\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "V9lrM5lXuX1z"
      },
      "source": [
        "#ensembing for test dataset and for final submisson on platform\n",
        "pred['ensemble'] = round((2*pred['xgb'] + pred['rfc']+3*pred['lgbm'])/6,2)"
      ],
      "execution_count": 314,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Cr_Zh3ysojjy"
      },
      "source": [
        "## Submisson Creation"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "ffrFLNXWoiFb",
        "outputId": "d2a5b513-3b5b-409b-89a5-4be3af36fb69"
      },
      "source": [
        "sub = pd.read_csv('/content/drive/MyDrive/JOB-A-THON - September 2021/SAMPLE.csv', index_col=0) #reading submission file\n",
        "sub.head()"
      ],
      "execution_count": 276,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>T1188341</th>\n",
              "      <td>42275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T1188342</th>\n",
              "      <td>42275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T1188343</th>\n",
              "      <td>42275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T1188344</th>\n",
              "      <td>42275</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T1188345</th>\n",
              "      <td>42275</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          Sales\n",
              "ID             \n",
              "T1188341  42275\n",
              "T1188342  42275\n",
              "T1188343  42275\n",
              "T1188344  42275\n",
              "T1188345  42275"
            ]
          },
          "metadata": {},
          "execution_count": 276
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 235
        },
        "id": "FZI-PxVjBqEJ",
        "outputId": "28cc4e0a-2199-40a0-98b7-94b9c1351fb8"
      },
      "source": [
        "sub['Sales'] = pred['ensemble'].values #overwriting our predicted sales values \n",
        "sub.head()"
      ],
      "execution_count": 277,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sales</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ID</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>T1188341</th>\n",
              "      <td>66030.30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T1188342</th>\n",
              "      <td>39222.99</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T1188343</th>\n",
              "      <td>71463.60</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T1188344</th>\n",
              "      <td>39686.42</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>T1188345</th>\n",
              "      <td>39324.72</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "             Sales\n",
              "ID                \n",
              "T1188341  66030.30\n",
              "T1188342  39222.99\n",
              "T1188343  71463.60\n",
              "T1188344  39686.42\n",
              "T1188345  39324.72"
            ]
          },
          "metadata": {},
          "execution_count": 277
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "BzY7ta4qpCMc"
      },
      "source": [
        "sub.to_csv('/content/drive/MyDrive/JOB-A-THON - September 2021/sub_final_ensemble.csv', index_label='ID') #finally saving our ensemble predictions into submission csv"
      ],
      "execution_count": 278,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "k6Z3Ebmjpasa"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}
